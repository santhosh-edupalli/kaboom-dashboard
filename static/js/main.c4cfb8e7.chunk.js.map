{"version":3,"sources":["reducers/home/converters.js","reducers/home/index.js","reducers/index.js","actions/Home/actionTypes.js","reducers/store.js","config/home/historicalChartConfig.js","compounds/network/axiosApi/axiosApi.js","config/deploymentConfig.js","compounds/network/socket/socket.js","actions/Home/index.js","config/constants.js","containers/HistoricalChart/HistoricalChart.js","config/home/liveChartConfig.js","containers/LiveChart/LiveChart.js","config/routes.js","containers/Decider.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["formatHistoricalData","data","map","dataItem","formatDataPoint","item","split","slice","forEach","x","push","Number","initialState","loading","historical_data","live_data","errorMessage","mainReducer","combineReducers","home","state","action","type","DATA_CONVERTERS","middleware","thunk","store","createStore","reducer","applyMiddleware","HISTORICAL_CHART_CONFIG","chart","foreColor","zoom","enabled","autoScaleYaxis","animations","height","title","text","align","xaxis","yaxis","tooltip","axiosRequest","axios","create","baseURL","responseType","socket_url","socket","clientSocket","on","console","log","subscribeToData","onData","emit","cb","err","unSubscribeToData","getHistoricalData","dispatch","request","url","method","then","response","catch","error","message","unsubscribeToData","HistoricalChart","props","this","className","color","options","series","Component","connect","ownProps","bindActionCreators","jobActions","LIVE_CHART_CONFIG","plotOptions","bar","columnWidth","show","format","formatter","undefined","LiveChart","ROUTES","Decider","Fragment","exact","activeClassName","to","path","component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.c4cfb8e7.chunk.js","sourcesContent":["export const formatHistoricalData = (data) =>{\n    let result = data.map((dataItem) => {\n        let item = formatDataPoint(dataItem)\n        return item;\n    })\n    return result\n}\n\nexport const formatDataPoint = (dataItem) => {\n    let item = [];    \n    dataItem.split(\",\").slice(0, 5).forEach((x) => {item.push(Number(x))});\n    \n    return item\n}","import * as actionTypes from \"../../actions/Home/actionTypes\"\nimport * as DATA_CONVERTERS from './converters'\n\nconst getInitialState = () => {  \n    return {\n        loading: false,\n        historical_data: [],\n        live_data:[],\n        errorMessage : null\n    }\n}\n\nconst initialState = getInitialState();\n\nexport const home = (state = initialState, action) => {\n    switch (action.type) {\n        case actionTypes.MAKE_HISTORICAL_DATA_REQUEST:\n            return{\n                ...state,\n                loading : true,\n                errorMessage :null\n            }\n        case actionTypes.HISTORICAL_DATA_REQUEST_SUCCESS:\n            return{\n                ...state,\n                loading : false,\n                historical_data :DATA_CONVERTERS.formatHistoricalData(action.data) \n            }\n        case actionTypes.HISTORICAL_DATA_REQUEST_FAILURE:\n            return{\n                ...state,\n                loading : false,\n                errorMessage : action.errorMessage\n            }\n        case actionTypes.SUBSCRIBE_TO_DATA_SUCCESS:\n            return{\n                ...state,\n                live_data : [DATA_CONVERTERS.formatDataPoint(action.data), ...state.live_data]\n            }\n        default:\n            return {\n                ...state\n            };\n    }\n};","import { combineReducers } from 'redux'\nimport { home } from \"./home\"\n  \nconst mainReducer = combineReducers({\n    home : home\n});\n  \nexport default mainReducer","export const MAKE_HISTORICAL_DATA_REQUEST = 'MAKE_HISTORICAL_DATA_REQUEST'\nexport const HISTORICAL_DATA_REQUEST_SUCCESS = 'HISTORICAL_DATA_REQUEST_SUCCESS'\nexport const HISTORICAL_DATA_REQUEST_FAILURE = 'HISTORICAL_DATA_REQUEST_FAILURE'\n\nexport const SUBSCRIBE_TO_DATA = 'SUBSCRIBE_TO_DATA'\nexport const SUBSCRIBE_TO_DATA_SUCCESS = 'SUBSCRIBE_TO_DATA_SUCCESS'\n\nexport const UN_SUBSCRIBE_TO_DATA = 'UN_SUBSCRIBE_TO_DATA'\nexport const UN_SUBSCRIBE_TO_DATA_SUCCESS = 'UN_SUBSCRIBE_TO_DATA_SUCCESS'","import { createStore, applyMiddleware } from 'redux'\nimport { createLogger } from 'redux-logger'\nimport thunk from 'redux-thunk'\nimport reducer from './index.js'\n\nconst middleware = [ thunk ];\nif (process.env.NODE_ENV !== 'production') {\n  middleware.push(createLogger());\n}\n\nexport const store = createStore(\n  reducer,\n  applyMiddleware(...middleware)\n)","export const HISTORICAL_CHART_CONFIG = {\n    chart: {\n        foreColor :'#fff',\n        zoom: {\n            enabled: true,\n            type: 'x',  \n            autoScaleYaxis: true,  \n        },\n        animations: {\n            enabled: false,\n        },\n        type: \"candlestick\",\n        height: '100%',\n    },\n    title: {\n        text: \"Historical Data\",\n        align: \"left\",\n    },\n    xaxis: {\n        type: \"datetime\"\n    },\n    yaxis: {\n        tooltip: {\n            enabled: true,\n        }\n    }\n}","import axios from 'axios';\nimport {DEPLOYED_SERVER_URL} from '../../../config/deploymentConfig'\n\nexport const axiosRequest = axios.create({\n    baseURL: DEPLOYED_SERVER_URL,\n    responseType: 'json'\n});","export const DEPLOYED_SERVER_URL = 'http://kaboom.rksv.net'","import clientSocket from 'socket.io-client';\nimport {DEPLOYED_SERVER_URL} from '../../../config/deploymentConfig';\n\nconst socket_url = `${DEPLOYED_SERVER_URL}/watch`\nconst socket = clientSocket(socket_url);\n\nsocket.on('connect', () => {\n    console.log('socket connected');\n});\n\nsocket.subscribeToData = (onData) => {\n    socket.emit('sub', {state: true});\n\n    socket.on('data', (data, cb) => {\n        onData(null, data);\n        const Acknowledgement = 1;\n        cb(Acknowledgement);\n    });\n\n    socket.on('error', (err) => {\n        onData(err);\n    });\n}\n\nsocket.unSubscribeToData = () => {\n    socket.emit('unsub', {state: false});\n}\n\nsocket.on('disconnect', () => {\n    console.log('socket disconnected');\n});\n\nexport default socket;","import * as actionTypes from './actionTypes'\nimport {axiosRequest} from '../../compounds/network/axiosApi/axiosApi'\nimport socket from '../../compounds/network/socket/socket'\nimport * as CONSTANTS from '../../config/constants'\n\nconst HISTORICAL_DATA_URL = '/api/historical'\n\nexport function getHistoricalData(){\n    return (dispatch) =>{\n        dispatch({\n            type: actionTypes.MAKE_HISTORICAL_DATA_REQUEST,\n        });\n        return axiosRequest.request({\n            url: HISTORICAL_DATA_URL,\n            method: 'GET',\n        }).then((response) => {\n            const data = response.data;\n            dispatch({\n                type: actionTypes.HISTORICAL_DATA_REQUEST_SUCCESS,\n                data: data,\n            });\n        }).catch((error) => {\n            const response = error.data;\n            const errorMessage = (response && response.message) || CONSTANTS.DEFAULT_API_FAIL_MESSAGE;\n            dispatch({\n                type: actionTypes.HISTORICAL_DATA_REQUEST_FAILURE,\n                message: errorMessage,\n            });\n        });\n    }\n}\n\nexport const subscribeToData = () => {\n    return (dispatch) => {\n        socket.subscribeToData((err, data) => {\n            if (err) {\n                console.log(err);\n                return;\n            }\n            dispatch({\n                type: actionTypes.SUBSCRIBE_TO_DATA_SUCCESS,\n                data,\n            });\n        });\n    }\n}\n\nexport const unsubscribeToData = () => {\n\treturn (dispatch) => {\n        socket.unSubscribeToData();\n    }\n}","export const DEFAULT_API_FAIL_MESSAGE = 'API failure. Try refreshing the browser'","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport ReactApexChart from \"react-apexcharts\";\nimport Loader from 'react-loader-spinner'\nimport {HISTORICAL_CHART_CONFIG} from '../../config/home/historicalChartConfig'\nimport * as jobActions from '../../actions/Home';\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\"\nimport \"./historicalChart.css\"\n\nclass HistoricalChart extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  componentDidMount() {\n    this.props.getHistoricalData();\n  }\n\n  render() {\n      return (\n        <div>\n        {\n          this.props.home.loading ? \n          <Loader className=\"loader\" type=\"Circles\" color=\"rgba(50, 117, 233,0.5)\"/> :\n          <div className=\"container\">\n          <ReactApexChart\n              options={HISTORICAL_CHART_CONFIG}\n              series={[{data : this.props.home.historical_data}]}\n              type=\"candlestick\"\n              height={500}\n          />\n          </div>\n        }\n        </div>\n      );\n  }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    return {\n        home: state.home\n    };\n};\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n    return bindActionCreators(jobActions, dispatch);\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(HistoricalChart)\n","export const LIVE_CHART_CONFIG = {\n    chart: {\n        zoom: {\n            enabled: true,\n            type: 'x',\n        },\n        foreColor : '#fff',\n        animations:{\n            enabled : false\n        },\n        type: \"candlestick\",\n        height: 350,\n    },\n    plotOptions: {\n        bar: {\n            columnWidth: '10%'\n        }\n    },\n    title: {\n        text: \"Live Data\",\n        align: \"left\",\n    },\n    xaxis: {\n        type: \"datetime\",\n    },\n    yaxis: {\n        tooltip: {\n            enabled: true,\n        }\n    },\n    tooltip:{\n        enabled:true,\n        x: {\n            show: true,\n            format: 'dd MMM HH:mm:ss',\n            formatter: undefined,\n        },\n    }\n}","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport ReactApexChart from \"react-apexcharts\";\nimport {LIVE_CHART_CONFIG} from '../../config/home/liveChartConfig'\nimport * as jobActions from '../../actions/Home';\nimport './liveChart.css'\n\nclass LiveChart extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  componentWillMount() {\n    this.props.subscribeToData();\n  }\n\n  componentWillUnmount(){\n    this.props.unsubscribeToData()\n  }\n\n  render() {\n      return (\n          <div>\n          <div className=\"container\">\n            <ReactApexChart\n                options={LIVE_CHART_CONFIG}\n                series={[{data : this.props.home.live_data}]}\n                type=\"candlestick\"\n                height={500}\n            />\n          </div>\n          </div>\n      );\n  }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    return {\n        home: state.home\n    };\n};\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n    return bindActionCreators(jobActions, dispatch);\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LiveChart)\n","export const ROUTES ={\n    HISTORICAL_DATA : '/',\n    LIVE_DATA : '/live-data'\n}","import React from \"react\"\nimport { BrowserRouter as Router, Switch, Route, NavLink as Link } from 'react-router-dom'\nimport HistoricalChart from './HistoricalChart/HistoricalChart'\nimport LiveChart from './LiveChart/LiveChart'\nimport { ROUTES } from '../config/routes'\nimport './decider.css'\n\nexport default function Decider() {\n    return (\n        <React.Fragment>\n            <div className=\"height-100\">\n                <Router>\n                    <div className=\"nav\">\n                        <Link className=\"nav-btn\" exact activeClassName=\"active-nav\" to={ROUTES.HISTORICAL_DATA}>Home</Link>\n                        <Link className=\"nav-btn\" activeClassName=\"active-nav\" to={ROUTES.LIVE_DATA}>Live Chart</Link>\n                    </div>\n                    <Switch>\n                        <Route path={ROUTES.HISTORICAL_DATA} exact component={HistoricalChart}></Route>\n                        <Route path={ROUTES.LIVE_DATA} exact component={LiveChart}></Route>\n                    </Switch>\n                </Router>\n            </div>\n        </React.Fragment>\n    );\n}\n\n","import React from 'react';\nimport logo from './logo.svg';\nimport Decider from './containers/Decider'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Decider/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport {store} from './reducers/store'\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}